using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using tusdotnet.Models.Configuration;
using XtraUpload.Database.Data.Common;
using XtraUpload.Domain;
using XtraUpload.Domain.Infra;

namespace XtraUpload.FileManager.Service
{
    public class AvatarUploadService : BaseFileUpload
    {
        public AvatarUploadService(IServiceProvider serviceProvider) : base(serviceProvider)
        {
            CreateTusConfiguration("/avatarupload");
        }

        /// <summary>
        /// Handle the upload completion
        /// </summary>
        protected override async Task OnUploadCompleted(FileCompleteContext ctx)
        {
            try
            {
                MoveFilesToFolder(ctx);
                //update db
                using IServiceScope scope = _serviceProvider.CreateScope();
                IUnitOfWork unitOfWork = scope.ServiceProvider.GetService<IUnitOfWork>();
                User user = await unitOfWork.Users.FirstOrDefaultAsync(s => s.Id == ctx.HttpContext.User.GetUserId());
                if (user != null)
                {
                    user.LastModified = DateTime.Now;
                    user.Avatar = ctx.HttpContext.Request.Host.ToString() + "api/file/avatar/" + user.Id;
                    try
                    {
                        await unitOfWork.CompleteAsync();
                    }
                    catch (Exception _ex)
                    {
                        _logger.LogError(_ex.Message);
                        throw new Exception("Unhandled exception thrown.");
                    }
                }
            }
            catch (Exception _ex)
            {
                _logger.LogError(_ex.Message);
                throw _ex;
            }
        }

        /// <summary>
        /// Moves the uploaded files to the avatar folder
        /// tus protocol puts the uploaded files into the store, XtraUpload move those files to the user directory
        /// </summary>
        private void MoveFilesToFolder(FileCompleteContext ctx)
        {
            string userid = ctx.HttpContext.User.GetUserId();
            string userFolder = Path.Combine(_uploadOpts.UploadPath, userid);
            string avatarFolder = Path.Combine(userFolder, "avatar");
            // Create user root directory
            if (!Directory.Exists(userFolder))
            {
                Directory.CreateDirectory(userFolder);
            }
            // Creat avatar directory
            if (!Directory.Exists(avatarFolder))
            {
                Directory.CreateDirectory(avatarFolder);
            }
            // move avatar to the avatar folder
            DirectoryInfo directoryInfo = new DirectoryInfo(_uploadOpts.UploadPath);
            foreach (FileInfo file in directoryInfo.GetFiles(ctx.FileId + "*"))
            {
                // Exemple of file names generated by tus are (...69375.metadata, ...69375.uploadlength ...)
                string[] subNames = file.Name.Split('.');
                string subName = subNames.Count() == 2 ? '.' + subNames[1] : "avatar.png";
                File.Move(file.FullName, Path.Combine(avatarFolder, subName), true);
            }
        }

    }
}
